# -*- coding: utf-8 -*-
"""Algorithmic Complexity Work.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16pvL3mCCWBlYlFJgod5cww7gUuwZayjg
"""

pip install osmnx

pip install geopandas

pip install ipyleaflet

import networkx as nx
import osmnx as ox
from shapely.geometry import LineString, mapping
import geopandas as gpd
from ipyleaflet import *

place_name = 'Los Olivos, Lima, Peru'
graph = ox.graph_from_place(place_name, network_type='drive')
graph_edit=nx.DiGraph(graph)

nodes, edges = ox.graph_to_gdfs(graph)
edges

edges = edges[edges['name']!='Cipriano Ruiz']
graph_edit=ox.graph_from_gdfs(nodes,edges)

center = (-11.964455, -77.0705008)
m = Map(center=center, basemap=basemaps.OpenStreetMap.France, zoom=15)

to_marker= Icon(
    icon_url='https://th.bing.com/th/id/R.fa74fd8669452ada18cfae1d2cdfe09e?rik=TrnRqmfWVA6PXg&pid=ImgRaw&r=0',
)
from_marker = Marker(location=center)
to_marker = Marker(location=center, icon=to_marker)

def set_nearest_node(marker):
 marker.nearest_node = ox.get_nearest_node(graph, marker.location)
 return

path_layer_list = []
def handle_change_location(event, marker):
    event_owner = event['owner']
    event_owner.nearest_node = ox.get_nearest_node(graph, event_owner.location)
    marker.nearest_node = ox.get_nearest_node(graph, marker.location)
    
    shortest_path = nx.dijkstra_path(graph_edit, event_owner.nearest_node, marker.nearest_node, weight='length')                          
    
    if len(path_layer_list) == 1:
        m.remove_layer(path_layer_list[0])
        path_layer_list.pop()
    
    shortest_path_points = nodes.loc[shortest_path]
    path = gpd.GeoDataFrame([LineString(shortest_path_points.geometry.values)], columns=['geometry'])
    path_layer = GeoData(geo_dataframe=path, style={'color':'green', 'weight':4})
    m.add_layer(path_layer)
    path_layer_list.append(path_layer)

from_marker.observe(lambda event: handle_change_location(event, to_marker), 'location')
to_marker.observe(lambda event: handle_change_location(event, from_marker), 'location')

m.add_layer(from_marker)
m.add_layer(to_marker)
set_nearest_node(from_marker)
set_nearest_node(to_marker)
m